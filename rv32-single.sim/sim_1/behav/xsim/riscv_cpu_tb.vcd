$date
   Mon Dec  4 13:03:55 2023
$end
$version
  2023.1
$end
$timescale
  1ps
$end
$scope module riscv_cpu_tb $end
$var reg 1 ! clk $end
$var reg 1 " r $end
$var reg 32 # i_mem_addr [31:0] $end
$var reg 32 $ i_mem_data [31:0] $end
$var reg 1 % i_mem_write $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 1 ' r $end
$var wire 32 ( i_mem_addr [31:0] $end
$var wire 32 ) i_mem_data [31:0] $end
$var wire 1 * i_mem_write $end
$var wire 32 + instr [31:0] $end
$var wire 32 , imm_sext [31:0] $end
$var reg 32 - PC [31:0] $end
$var wire 1 . branch $end
$var wire 1 / zero $end
$var wire 1 0 mem_read $end
$var wire 1 1 mem_2_reg $end
$var wire 1 2 mem_write $end
$var wire 1 3 alu_src $end
$var wire 1 4 reg_write $end
$var wire 2 5 alu_op [1:0] $end
$var wire 32 6 read_data1 [31:0] $end
$var wire 32 7 read_data2 [31:0] $end
$var wire 32 8 write_data [31:0] $end
$var wire 4 9 operation [3:0] $end
$var wire 32 : alu_in1 [31:0] $end
$var wire 32 ; alu_in2 [31:0] $end
$var wire 32 < alu_result [31:0] $end
$var wire 32 = read_data [31:0] $end
$scope module im1 $end
$var wire 1 ' r $end
$var wire 32 > read_addr [31:0] $end
$var reg 32 ? instr [31:0] $end
$var wire 32 ( i_mem_addr [31:0] $end
$var wire 32 ) i_mem_data [31:0] $end
$var wire 1 * i_mem_write $end
$var integer 32 @ i [31:0] $end
$upscope $end
$scope module cu1 $end
$var wire 1 ' r $end
$var wire 7 A op_code [6:0] $end
$var wire 1 0 mem_read $end
$var wire 1 1 mem_2_reg $end
$var wire 1 2 mem_write $end
$var wire 1 3 alu_src $end
$var wire 2 5 alu_op [1:0] $end
$var wire 1 4 reg_write $end
$var wire 1 . branch $end
$upscope $end
$scope module rf1 $end
$var wire 1 ' r $end
$var wire 5 B rs1 [19:15] $end
$var wire 5 C rs2 [24:20] $end
$var wire 5 D write_addr [11:7] $end
$var wire 1 4 write_enable $end
$var wire 32 8 write_data [31:0] $end
$var reg 32 E read_data1 [31:0] $end
$var reg 32 F read_data2 [31:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module ig1 $end
$var wire 1 ' r $end
$var wire 32 + instruction [31:0] $end
$var reg 32 H imm_sext [31:0] $end
$upscope $end
$scope module ac1 $end
$var wire 1 ' r $end
$var wire 2 5 alu_op [1:0] $end
$var wire 10 I func_code [9:0] $end
$var reg 4 J operation [3:0] $end
$upscope $end
$scope module alu1 $end
$var wire 1 ' r $end
$var wire 4 9 alu_op [3:0] $end
$var wire 32 : alu_in1 [31:0] $end
$var wire 32 ; alu_in2 [31:0] $end
$var wire 1 / zero $end
$var reg 32 K alu_result [31:0] $end
$var wire 32 L alu_in1_signed [31:0] $end
$var wire 32 M alu_in2_signed [31:0] $end
$upscope $end
$scope module dm1 $end
$var wire 1 ' r $end
$var wire 32 < address [31:0] $end
$var wire 1 2 write_en $end
$var wire 1 0 read_en $end
$var wire 32 7 write_data [31:0] $end
$var reg 32 N read_data [31:0] $end
$var integer 32 O i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
1"
b0 #
b0 $
0%
1&
1'
b0 (
b0 )
0*
b0 +
b0 ,
b0 -
0.
1/
00
01
02
03
04
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b1111111111 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b100000 G
b0 H
b0 I
b0 J
b0 K
b0 L
b0 M
b0 N
b1111111111 O
$end
#5000
0!
0"
0&
0'
b1000001000000110110011 +
0/
14
b10 5
b1 6
b101 7
b110 8
b10 9
b1 :
b101 ;
b110 <
b1000001000000110110011 ?
b110011 A
b1 B
b10 C
b11 D
b1 E
b101 F
b10 J
b110 K
b1 L
b101 M
#10000
1!
1&
b1000000000100010000001000110011 +
b1 -
b101 6
b1 7
b100 8
b110 9
b101 :
b1 ;
b100 <
b1 >
b1000000000100010000001000110011 ?
b110011 A
b10 B
b1 C
b100 D
b101 E
b1 F
b100000000 I
b110 J
b100 K
b101 L
b1 M
#15000
0!
0&
#20000
1!
1&
b1000001111001010110011 +
b10 -
b1 6
b101 7
b1 8
b0 9
b1 :
b101 ;
b1 <
b10 >
b1000001111001010110011 ?
b110011 A
b1 B
b10 C
b101 D
b1 E
b101 F
b111 I
b0 J
b1 K
b1 L
b101 M
#25000
0!
0&
#30000
1!
1&
b1000100110001100110011 +
b11 -
b100 6
b101 8
b1 9
b100 :
b101 <
b11 >
b1000100110001100110011 ?
b110011 A
b100 B
b10 C
b110 D
b100 E
b110 I
b1 J
b101 K
b100 L
#35000
0!
0&
#40000
1!
1&
b100010001110000011 +
b100 -
10
11
13
b0 5
b0 7
b1000100 8
b10 9
b0 ;
b100 <
b1000100 =
b100 >
b100010001110000011 ?
b11 A
b100 B
b0 C
b111 D
b0 F
b10 I
b10 J
b100 K
b0 M
b1000100 N
#45000
0!
0&
#50000
1!
1&
b11100000010000000100011 +
b101 -
1/
00
01
12
04
b0 6
b1000100 7
b0 8
b0 :
b0 <
b101 >
b11100000010000000100011 ?
b100011 A
b0 B
b111 C
b0 D
b0 E
b1000100 F
b0 K
b0 L
#55000
0!
0&
#60000
1!
1&
b11000010000010101100011 +
b1010 ,
b110 -
1.
1/
02
03
b1 5
b101 6
b101 7
b0 8
b110 9
b101 :
b101 ;
b0 <
b110 >
b11000010000010101100011 ?
b1100011 A
b10 B
b110 C
b1010 D
b101 E
b101 F
b1010 H
b0 I
b110 J
b0 K
b101 L
b101 M
#65000
0!
0&
#70000
1!
1&
b0 +
b0 ,
b10000 -
0.
b0 5
b0 6
b0 7
b10 9
b0 :
b0 ;
b10000 >
b0 ?
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 H
b10 J
b0 L
b0 M
#75000
0!
0&
#80000
1!
1&
b10001 -
b10001 >
#85000
0!
0&
#90000
1!
1&
b10010 -
b10010 >
#95000
0!
0&
#100000
1!
1&
b10011 -
b10011 >
#105000
0!
0&
#110000
1!
1&
b10100 -
b10100 >
#115000
0!
0&
#120000
1!
1&
b10101 -
b10101 >
#125000
0!
0&
